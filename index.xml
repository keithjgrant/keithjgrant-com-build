<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    
    <title>Keith J. Grant</title>
    
    <link>http://keithjgrant.com/index.xml</link>
    <description>Recent content in Keith J. Grant on Keith J. Grant</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Mar 2017 20:29:35 +0000</lastBuildDate>
    <link rel="hub"  href="https://keithjgrant.superfeedr.com/" xmlns="http://www.w3.org/2005/Atom" />
    <link rel="self" href="http://keithjgrant.com/index.xml" xmlns="http://www.w3.org/2005/Atom" />
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/likes/2017/03/73775/</link>
      <pubDate>Mon, 20 Mar 2017 20:29:35 +0000</pubDate>
      
      <guid>http://keithjgrant.com/likes/2017/03/73775/</guid>
      <description></description>
    </item>
    
    <item>
      <title>More thoughts on CSS in JS</title>
      <link>http://keithjgrant.com/posts/2017/03/more-thoughts-on-css-in-js/</link>
      <pubDate>Mon, 20 Mar 2017 15:07:49 -0400</pubDate>
      
      <guid>http://keithjgrant.com/posts/2017/03/more-thoughts-on-css-in-js/</guid>
      <description>&lt;p&gt;At a previous job, I was brought in to a team of Java devs to provide a little JS support. They had been using something called PrimeFaces, basically a bunch of front-end components you drop into JSF pages. Working with it was horrid.&lt;/p&gt;

&lt;p&gt;In short, these devs knew nothing about JavaScript or the front-end, but this tool let them sort of hack a UI together. It abstracted away all the tools needed for really working in the front end. For me, someone adept in JavaScript, working with PrimeFaces was like trying to code without a keyboard.&lt;/p&gt;

&lt;p&gt;I’ve also had to work on projects coded in ExtJS. These feel about the same way: although you are technically editing a JS file, you aren’t really programming “in JavaScript.” Instead, you are basically coding via configuration. Actual understanding of JavaScript doesn’t help you much.&lt;/p&gt;

&lt;p&gt;To me, CSS in JS feels the same way. It feels like a tool so a bunch of JavaScript devs can kinda-sorta hack together styles without actually having to write CSS. Except the syntax is more clunky and you have taken away the cascade. (And, yet, surprise! You still need to learn the most complicated parts of CSS.)&lt;/p&gt;

&lt;p&gt;Now I’ll be fair, CSS in JS libraries typically provide a much thinner buffer between you and the actual CSS when compared to PrimeFaces. But still… it’s an abstraction layer. It gives the illusion of writing styles in perfect isolation, but inheritance still takes place and can interfere. It gets between me and the code I want actual control over.&lt;/p&gt;

&lt;p&gt;I know what I’m doing when I code CSS. I &lt;em&gt;want&lt;/em&gt; the cascade in many instances; removing it feels crippling. I won’t deny CSS in JS offers some benefits. But they are benefits I am not convinced I need at a cost I am not sure I want to pay.&lt;/p&gt;

&lt;p&gt;I won’t say it’s the wrong choice for everyone. Some folks who really do grok CSS are in favor of it. Sometimes ExtJS is the right choice (don’t quote me on that). But dang, please know it’s a compromise that someone might have to clean up down the road.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/likes/2017/03/65329/</link>
      <pubDate>Mon, 20 Mar 2017 18:08:49 +0000</pubDate>
      
      <guid>http://keithjgrant.com/likes/2017/03/65329/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/notes/2017/03/48158/</link>
      <pubDate>Fri, 17 Mar 2017 13:22:38 +0000</pubDate>
      
      <guid>http://keithjgrant.com/notes/2017/03/48158/</guid>
      <description>&lt;p&gt;Developers somehow acquired the idea that CSS should be easy. Like, learn in a weekend easy.&lt;/p&gt;

&lt;p&gt;CSS isn’t like that. Nobody &lt;em&gt;in the world&lt;/em&gt; knows all of CSS. You need to commit to learning it just as you do conventional programming.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A better approach to CSS aspect ratios</title>
      <link>http://keithjgrant.com/posts/2017/03/aspect-ratios/</link>
      <pubDate>Tue, 14 Mar 2017 10:12:43 -0400</pubDate>
      
      <guid>http://keithjgrant.com/posts/2017/03/aspect-ratios/</guid>
      <description>

&lt;p&gt;There’s an old hack for creating elements with a fixed aspect ratio that involves using a percentage-based padding. You may be familiar with it. It looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.tile {
  height: 0;
  overflow: hidden;
  padding-bottom: 25%;
  background-color: bisque;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The element is forced to have no height, then its bottom padding is set to the actual desired height. This produces an element something like this:&lt;/p&gt;

&lt;figure class=&#34;-demo-container&#34;&gt;
  &lt;div class=&#34;-demo1&#34;&gt;
    4:1 aspect ratio
  &lt;/div&gt;
&lt;/figure&gt;

&lt;p&gt;This works because of a peculiar quirk of padding: Any padding specified in percent computes to a percentage of the element’s &lt;em&gt;width&lt;/em&gt;&amp;mdash;even if it is a top or bottom padding. (The same is true for margin as well.) This is a bit counter-intuitive, but it comes in handy. I think the original reasoning was so you could declare something like &lt;code&gt;padding: 5%&lt;/code&gt; and get an equal padding on all four sides of the element, regardless of its shape.&lt;/p&gt;

&lt;p&gt;Of course, this approach has a problem: overflow is cut off:&lt;/p&gt;

&lt;figure class=&#34;-demo-container&#34;&gt;
  &lt;div class=&#34;-demo1&#34;&gt;
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam laoreet tellus ut erat egestas vestibulum. Aliquam erat volutpat. Fusce ut nibh quis lectus fermentum aliquet. Suspendisse potenti.
  &lt;/div&gt;
&lt;/figure&gt;

&lt;p&gt;This approach creates fixed height of the element, which in CSS is an anti-pattern. For this reason, I’ve always felt dirty using it.&lt;/p&gt;

&lt;h2 id=&#34;dealing-with-overflow&#34;&gt;Dealing with overflow&lt;/h2&gt;

&lt;p&gt;A while back, I stumbled across an approach that is similar, but prevents the overflow problem. Instead of setting our element’s height, we can set the height on a floated &lt;code&gt;::before&lt;/code&gt; pseudo-element. Watch what happens when we do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.tile {
  background-color: darkseagreen;
}
.tile::before {
  content: &amp;quot;&amp;quot;;
  float: left;
  padding-bottom: 25%;
}
.tile::after {
  clear: left;
  content: &amp;quot; &amp;quot;;
  display: table;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;::after&lt;/code&gt; is just a familiar clearfix. This produces a very similar result:&lt;/p&gt;

&lt;figure class=&#34;-demo-container&#34;&gt;
  &lt;div class=&#34;-demo2&#34;&gt;
    4:1 aspect ratio
  &lt;/div&gt;
&lt;/figure&gt;

&lt;p&gt;However, the element will still grow to contain overflow if necessary:&lt;/p&gt;

&lt;figure class=&#34;-demo-container&#34;&gt;
  &lt;div class=&#34;-demo2&#34;&gt;
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam laoreet tellus ut erat egestas vestibulum. Aliquam erat volutpat. Fusce ut nibh quis lectus fermentum aliquet. Suspendisse potenti.
  &lt;/div&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;

&lt;p&gt;The trick is, instead of explicitly controlling (and thus limiting) the height of the element, we set a known height on the floated pseudo element. By using a padding-based percentage, this will be a ratio of the element’s width. We float it left and leave it empty, producing a width of zero. Here is the floated element, with a black outline added:&lt;/p&gt;

&lt;figure class=&#34;-demo-container&#34;&gt;
  &lt;div class=&#34;-demo3&#34;&gt;
    Floated pseudo element provides a min height to the element.
  &lt;/div&gt;
&lt;/figure&gt;

&lt;p&gt;Then, in the &lt;code&gt;::after&lt;/code&gt; pseudo-element, we clear the float, forcing the element to grow to contain the floated &lt;code&gt;::before&lt;/code&gt;. Since the float has a width of 0, it doesn’t interfere with the content layout in any way.  And when the content extends below the bottom of the float, the box simply grows naturally to contain it:&lt;/p&gt;

&lt;figure class=&#34;-demo-container&#34;&gt;
  &lt;div class=&#34;-demo3&#34;&gt;
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam laoreet tellus ut erat egestas vestibulum. Aliquam erat volutpat. Fusce ut nibh quis lectus fermentum aliquet. Suspendisse potenti.
  &lt;/div&gt;
&lt;/figure&gt;

&lt;style&gt;
  .-demo-container {
    max-width: 300px;
    line-height: 1.6;
  }

  .-demo1 {
    height: 0;
    overflow: hidden;
    padding-bottom: 25%;
    background-color: bisque;
  }

  .-demo2 {
    background-color: darkseagreen;
    line-height: 1.6;
  }
  .-demo2::before {
    content: &#34;&#34;;
    float: left;
    padding-bottom: 25%;
  }
  .-demo2::after {
    clear: left;
    content: &#34; &#34;;
    display: table;
  }

  .-demo3 {
    background-color: darkseagreen;
    line-height: 1.6;
  }
  .-demo3::before {
    content: &#34;&#34;;
    float: left;
    padding-bottom: 25%;
    border: 1px solid black;
  }
  .-demo3::after {
    clear: left;
    content: &#34; &#34;;
    display: table;
  }
&lt;/style&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/likes/2017/03/45532/</link>
      <pubDate>Tue, 14 Mar 2017 12:38:52 +0000</pubDate>
      
      <guid>http://keithjgrant.com/likes/2017/03/45532/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/notes/2017/03/68059/</link>
      <pubDate>Mon, 13 Mar 2017 18:54:19 +0000</pubDate>
      
      <guid>http://keithjgrant.com/notes/2017/03/68059/</guid>
      <description>&lt;p&gt;I’m still fascinated that JavaScript—which only runs on one thread—is the language that popularized functional, async programming, which is needed for multi-threaded programming.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/notes/2017/03/66211/</link>
      <pubDate>Mon, 13 Mar 2017 18:23:31 +0000</pubDate>
      
      <guid>http://keithjgrant.com/notes/2017/03/66211/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/notes/2017/03/65135/</link>
      <pubDate>Fri, 10 Mar 2017 18:05:35 +0000</pubDate>
      
      <guid>http://keithjgrant.com/notes/2017/03/65135/</guid>
      <description>&lt;p&gt;Design, Accessibility, Performance, UX, Frameworks… you can’t master them all. Focus on one &amp;amp; find folks who are good at each.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/likes/2017/03/59289/</link>
      <pubDate>Fri, 10 Mar 2017 16:28:09 +0000</pubDate>
      
      <guid>http://keithjgrant.com/likes/2017/03/59289/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
