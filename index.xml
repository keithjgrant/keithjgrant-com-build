<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    
    <title>Keith J. Grant</title>
    
    <link>http://keithjgrant.com/index.xml</link>
    <description>Recent content in Keith J. Grant on Keith J. Grant</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Apr 2017 17:13:51 +0000</lastBuildDate>
    <link rel="hub"  href="https://keithjgrant.superfeedr.com/" xmlns="http://www.w3.org/2005/Atom" />
    <link rel="self" href="http://keithjgrant.com/index.xml" xmlns="http://www.w3.org/2005/Atom" />
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/likes/2017/04/62031/</link>
      <pubDate>Fri, 14 Apr 2017 17:13:51 +0000</pubDate>
      
      <guid>http://keithjgrant.com/likes/2017/04/62031/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/likes/2017/04/52158/</link>
      <pubDate>Fri, 14 Apr 2017 14:29:18 +0000</pubDate>
      
      <guid>http://keithjgrant.com/likes/2017/04/52158/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/notes/2017/04/52662/</link>
      <pubDate>Thu, 13 Apr 2017 14:37:42 +0000</pubDate>
      
      <guid>http://keithjgrant.com/notes/2017/04/52662/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/likes/2017/04/67695/</link>
      <pubDate>Wed, 12 Apr 2017 18:48:15 +0000</pubDate>
      
      <guid>http://keithjgrant.com/likes/2017/04/67695/</guid>
      <description></description>
    </item>
    
    <item>
      <title>What Grid Can Do That Tables Can’t</title>
      <link>http://keithjgrant.com/posts/2017/04/grid-v-tables/</link>
      <pubDate>Wed, 12 Apr 2017 11:52:15 -0400</pubDate>
      
      <guid>http://keithjgrant.com/posts/2017/04/grid-v-tables/</guid>
      <description>&lt;p&gt;There’s a kind of narrative out there that’s basically, “Silly CSS wonks: first they tell us tables are bad, now they give us grid.” Nevermind that this is completely ignorant of the original argument against tables for layout (tables were never bad for layout because of the way they looked on screen; they were bad because of what they did to your markup).&lt;/p&gt;

&lt;p&gt;It’s true that grid looks a lot like tables at first glance. But it’s also worth noting the features grid provides that cannot be accomplished using tables. Here are just a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gridbyexample.com/examples/example15/&#34;&gt;Overlapping cells&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gridbyexample.com/examples/example12/&#34;&gt;Empty cells&lt;/a&gt;, without a bunch of empty tags&lt;/li&gt;
&lt;li&gt;Size columns (or rows!) in &lt;a href=&#34;https://alligator.io/css/css-grid-layout-fr-unit/&#34;&gt;proportion to one another&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gridbyexample.com/examples/example24/&#34;&gt;Complex alignment&lt;/a&gt; of &lt;a href=&#34;http://gridbyexample.com/examples/example25/&#34;&gt;contents within a cell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Specify a &lt;a href=&#34;https://rachelandrew.co.uk/archives/2016/04/12/flexible-sized-grids-with-auto-fill-and-minmax/&#34;&gt;flexible range of acceptable sizes&lt;/a&gt; for columns &amp;amp; rows&lt;/li&gt;
&lt;li&gt;Provide a full definition of responsive behavior, often without any media queries&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/replies/2017/04/53542/</link>
      <pubDate>Wed, 12 Apr 2017 14:52:22 +0000</pubDate>
      
      <guid>http://keithjgrant.com/replies/2017/04/53542/</guid>
      <description>&lt;p&gt;Okay, backing up. Here’s the problem, as you define it: some developer somewhere adds CSS to your codebase that has unintended consequences. By packaging in a reusable component, you’ve isolated the problem.&lt;/p&gt;

&lt;p&gt;But in reality, all you’ve done is moved the API. You still need the developer to use your component. Do you then wrap every native in a component, like links and inputs? If you make a &amp;lt;Button&amp;gt;, what’s to say some dev isn’t going to forget it’s there and use a native &amp;lt;button&amp;gt;? What if they need/want something slightly different, do you keep adding more and more options to the component? These can be answered, but these are all the same decisions you would make in CSS land.&lt;/p&gt;

&lt;p&gt;It’s a lot of overhead, and I don’t see the gain. What I do see is permission implicitly granted for devs who don’t understand CSS—and by that I mean things like positioning and layout and margin collapsing—to start writing CSS willy nilly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/notes/2017/04/51720/</link>
      <pubDate>Wed, 12 Apr 2017 14:22:00 +0000</pubDate>
      
      <guid>http://keithjgrant.com/notes/2017/04/51720/</guid>
      <description>&lt;p&gt;“When it comes to CSS, isolation is more important than reuse”&lt;/p&gt;

&lt;p&gt;I disagree with this &lt;em&gt;so hard&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/replies/2017/04/62981/</link>
      <pubDate>Tue, 11 Apr 2017 17:29:41 +0000</pubDate>
      
      <guid>http://keithjgrant.com/replies/2017/04/62981/</guid>
      <description>&lt;p&gt;I feel like a guy yelling, “don’t drive on the sidewalk because people should be able to walk there” and your response is “nobody walks on the sidewalk because everybody drives there.”&lt;/p&gt;

&lt;p&gt;Anyway, the larger point is: driving on the road is &lt;em&gt;better.&lt;/em&gt; And I would argue using relative units is better in many cases. Why? Because the code maintenance is easier. True, using px requires less thought up front. But if you use relative units, you can define systems that work together better as a whole.&lt;/p&gt;

&lt;p&gt;You can change a few inputs and have the entire system respond. You can define things in terms of your fonts, because your fonts are an integral part of the design. With pixels, small changes in the future can require code changes all over your code to adapt to that change. With units, done right, one small change can update the entire system accordingly.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://keithjgrant.com/posts/2017/04/dont-qwop-your-css/&#34;&gt;http://keithjgrant.com/posts/2017/04/dont-qwop-your-css/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/likes/2017/04/45005/</link>
      <pubDate>Tue, 11 Apr 2017 12:30:05 +0000</pubDate>
      
      <guid>http://keithjgrant.com/likes/2017/04/45005/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Don’t QWOP Your Way Through CSS</title>
      <link>http://keithjgrant.com/posts/2017/04/dont-qwop-your-css/</link>
      <pubDate>Fri, 07 Apr 2017 15:45:07 -0400</pubDate>
      
      <guid>http://keithjgrant.com/posts/2017/04/dont-qwop-your-css/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.foddy.net/Athletics.html&#34;&gt;QWOP&lt;/a&gt;, if you haven’t played it, is a ridiculous running game. Instead of pressing, say, the right arrow key to run, you must control each of the runner’s muscles independently. Pressing the keys Q, W, O, and P will each extend one leg or bend one knee. Coordinating them all is incredibly difficult, and you are usually lucky if you can make a full stride before falling on your head.&lt;/p&gt;

&lt;p&gt;This is also how a lot of developers treat CSS. Instead of thinking about constructing a robust system, they focus on only one specific part of the desired result. Instead of asking, “How do I run?”, they ask, “How do I flex my knee?” I can teach you how to flex your knee, but if QWOP shows us anything, that knowledge might actually make running more difficult.&lt;/p&gt;

&lt;p&gt;CSS does a lot of work for you, if you will let it. Normal document flow ensures things all fit together on the page; this is why you should be judicious with positioning that breaks out of document flow. CSS automatically sizes your elements to contain their text; this is why you should avoid explicitly setting height. Relative units allow you to define one value in terms of another so they will respond together if the context changes; this is why I sometimes frown on pixel units. Margins collapse so that paragraphs stack with the correct spacing. Certain properties inherit down the DOM tree so you don’t have to specify a font for every single element.&lt;/p&gt;

&lt;p&gt;You can get down to the “bare metal” in CSS, if you want. You can specify absolute positions for everything and set explicit heights and define every single value in pixels and override inheritance. But in the end, this will make more work for yourself and unearth edge cases you didn’t think about.&lt;/p&gt;

&lt;p&gt;The next time you find yourself asking something like, “How do I vertically center this?”, take a step back. Are you having trouble because you set the height on something? Why did you set a height? What are you &lt;em&gt;actually&lt;/em&gt; trying to achieve? Instead of focusing on a specific metric, think about the system as a whole: perhaps you want several items to all have the same height. Now, the problem is defined in terms of some desired &lt;a href=&#34;https://www.youtube.com/watch?v=TGHbkTGVqoU&#34;&gt;system behavior&lt;/a&gt;. Solve for that: flexbox or grid can align multiple elements with the same height (they can also center the contents within, too).&lt;/p&gt;

&lt;p&gt;The automatic behaviors of CSS aren’t always apparent if you aren’t familiar with them. They can result in weird outcomes, and you will be frustrated by them. So, I think, the first tendency is to find a way to turn off this “help.” Don’t.&lt;/p&gt;

&lt;p&gt;Trust CSS; it does good things for you if you let it. Learn how to solve for system behaviors. Unless you like running by pressing Q, W, O, and P.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
