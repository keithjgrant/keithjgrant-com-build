<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    
    <title>Keith J. Grant</title>
    
    <link>http://keithjgrant.com/index.xml</link>
    <description>Recent content in Keith J. Grant on Keith J. Grant</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Apr 2017 15:27:38 +0000</lastBuildDate>
    <link rel="hub"  href="https://keithjgrant.superfeedr.com/" xmlns="http://www.w3.org/2005/Atom" />
    <link rel="self" href="http://keithjgrant.com/index.xml" xmlns="http://www.w3.org/2005/Atom" />
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/likes/2017/04/55658/</link>
      <pubDate>Mon, 17 Apr 2017 15:27:38 +0000</pubDate>
      
      <guid>http://keithjgrant.com/likes/2017/04/55658/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/likes/2017/04/62031/</link>
      <pubDate>Fri, 14 Apr 2017 17:13:51 +0000</pubDate>
      
      <guid>http://keithjgrant.com/likes/2017/04/62031/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/likes/2017/04/52158/</link>
      <pubDate>Fri, 14 Apr 2017 14:29:18 +0000</pubDate>
      
      <guid>http://keithjgrant.com/likes/2017/04/52158/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/notes/2017/04/52662/</link>
      <pubDate>Thu, 13 Apr 2017 14:37:42 +0000</pubDate>
      
      <guid>http://keithjgrant.com/notes/2017/04/52662/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/likes/2017/04/67695/</link>
      <pubDate>Wed, 12 Apr 2017 18:48:15 +0000</pubDate>
      
      <guid>http://keithjgrant.com/likes/2017/04/67695/</guid>
      <description></description>
    </item>
    
    <item>
      <title>What Grid Can Do That Tables Can’t</title>
      <link>http://keithjgrant.com/posts/2017/04/grid-v-tables/</link>
      <pubDate>Wed, 12 Apr 2017 11:52:15 -0400</pubDate>
      
      <guid>http://keithjgrant.com/posts/2017/04/grid-v-tables/</guid>
      <description>&lt;p&gt;There’s a kind of narrative out there that’s basically, “Silly CSS wonks: first they tell us tables are bad, now they give us grid.” Nevermind that this is completely ignorant of the original argument against tables for layout (tables were never bad for layout because of the way they looked on screen; they were bad because of what they did to your markup).&lt;/p&gt;

&lt;p&gt;It’s true that grid looks a lot like tables at first glance. But it’s also worth noting the features grid provides that cannot be accomplished using tables. Here are just a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gridbyexample.com/examples/example15/&#34;&gt;Overlapping cells&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gridbyexample.com/examples/example12/&#34;&gt;Empty cells&lt;/a&gt;, without a bunch of empty tags&lt;/li&gt;
&lt;li&gt;Size columns (or rows!) in &lt;a href=&#34;https://alligator.io/css/css-grid-layout-fr-unit/&#34;&gt;proportion to one another&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gridbyexample.com/examples/example24/&#34;&gt;Complex alignment&lt;/a&gt; of &lt;a href=&#34;http://gridbyexample.com/examples/example25/&#34;&gt;contents within a cell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Specify a &lt;a href=&#34;https://rachelandrew.co.uk/archives/2016/04/12/flexible-sized-grids-with-auto-fill-and-minmax/&#34;&gt;flexible range of acceptable sizes&lt;/a&gt; for columns &amp;amp; rows&lt;/li&gt;
&lt;li&gt;Provide a full definition of responsive behavior, often without any media queries&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/replies/2017/04/53542/</link>
      <pubDate>Wed, 12 Apr 2017 14:52:22 +0000</pubDate>
      
      <guid>http://keithjgrant.com/replies/2017/04/53542/</guid>
      <description>&lt;p&gt;Okay, backing up. Here’s the problem, as you define it: some developer somewhere adds CSS to your codebase that has unintended consequences. By packaging in a reusable component, you’ve isolated the problem.&lt;/p&gt;

&lt;p&gt;But in reality, all you’ve done is moved the API. You still need the developer to use your component. Do you then wrap every native in a component, like links and inputs? If you make a &amp;lt;Button&amp;gt;, what’s to say some dev isn’t going to forget it’s there and use a native &amp;lt;button&amp;gt;? What if they need/want something slightly different, do you keep adding more and more options to the component? These can be answered, but these are all the same decisions you would make in CSS land.&lt;/p&gt;

&lt;p&gt;It’s a lot of overhead, and I don’t see the gain. What I do see is permission implicitly granted for devs who don’t understand CSS—and by that I mean things like positioning and layout and margin collapsing—to start writing CSS willy nilly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/notes/2017/04/51720/</link>
      <pubDate>Wed, 12 Apr 2017 14:22:00 +0000</pubDate>
      
      <guid>http://keithjgrant.com/notes/2017/04/51720/</guid>
      <description>&lt;p&gt;“When it comes to CSS, isolation is more important than reuse”&lt;/p&gt;

&lt;p&gt;I disagree with this &lt;em&gt;so hard&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/replies/2017/04/62981/</link>
      <pubDate>Tue, 11 Apr 2017 17:29:41 +0000</pubDate>
      
      <guid>http://keithjgrant.com/replies/2017/04/62981/</guid>
      <description>&lt;p&gt;I feel like a guy yelling, “don’t drive on the sidewalk because people should be able to walk there” and your response is “nobody walks on the sidewalk because everybody drives there.”&lt;/p&gt;

&lt;p&gt;Anyway, the larger point is: driving on the road is &lt;em&gt;better.&lt;/em&gt; And I would argue using relative units is better in many cases. Why? Because the code maintenance is easier. True, using px requires less thought up front. But if you use relative units, you can define systems that work together better as a whole.&lt;/p&gt;

&lt;p&gt;You can change a few inputs and have the entire system respond. You can define things in terms of your fonts, because your fonts are an integral part of the design. With pixels, small changes in the future can require code changes all over your code to adapt to that change. With units, done right, one small change can update the entire system accordingly.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://keithjgrant.com/posts/2017/04/dont-qwop-your-css/&#34;&gt;http://keithjgrant.com/posts/2017/04/dont-qwop-your-css/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://keithjgrant.com/likes/2017/04/45005/</link>
      <pubDate>Tue, 11 Apr 2017 12:30:05 +0000</pubDate>
      
      <guid>http://keithjgrant.com/likes/2017/04/45005/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
