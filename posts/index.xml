<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    
    <title>Posts on Keith J. Grant</title>
    
    <link>http://keithjgrant.com/posts/index.xml</link>
    <description>Recent content in Posts on Keith J. Grant</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Apr 2017 11:52:15 -0400</lastBuildDate>
    <link rel="hub"  href="https://keithjgrant.superfeedr.com/" xmlns="http://www.w3.org/2005/Atom" />
    <link rel="self" href="http://keithjgrant.com/posts/index.xml" xmlns="http://www.w3.org/2005/Atom" />
    
    <item>
      <title>What Grid Can Do That Tables Can’t</title>
      <link>http://keithjgrant.com/posts/2017/04/grid-v-tables/</link>
      <pubDate>Wed, 12 Apr 2017 11:52:15 -0400</pubDate>
      
      <guid>http://keithjgrant.com/posts/2017/04/grid-v-tables/</guid>
      <description>&lt;p&gt;There’s a kind of narrative out there that’s basically, “Silly CSS wonks: first they tell us tables are bad, now they give us grid.” Nevermind that this is completely ignorant of the original argument against tables for layout (tables were never bad for layout because of the way they looked on screen; they were bad because of what they did to your markup).&lt;/p&gt;

&lt;p&gt;It’s true that grid looks a lot like tables at first glance. But it’s also worth noting the features grid provides that cannot be accomplished using tables. Here are just a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gridbyexample.com/examples/example15/&#34;&gt;Overlapping cells&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gridbyexample.com/examples/example12/&#34;&gt;Empty cells&lt;/a&gt;, without a bunch of empty tags&lt;/li&gt;
&lt;li&gt;Size columns (or rows!) in &lt;a href=&#34;https://alligator.io/css/css-grid-layout-fr-unit/&#34;&gt;proportion to one another&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gridbyexample.com/examples/example24/&#34;&gt;Complex alignment&lt;/a&gt; of &lt;a href=&#34;http://gridbyexample.com/examples/example25/&#34;&gt;contents within a cell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Specify a &lt;a href=&#34;https://rachelandrew.co.uk/archives/2016/04/12/flexible-sized-grids-with-auto-fill-and-minmax/&#34;&gt;flexible range of acceptable sizes&lt;/a&gt; for columns &amp;amp; rows&lt;/li&gt;
&lt;li&gt;Provide a full definition of responsive behavior, often without any media queries&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Don’t QWOP Your Way Through CSS</title>
      <link>http://keithjgrant.com/posts/2017/04/dont-qwop-your-css/</link>
      <pubDate>Fri, 07 Apr 2017 15:45:07 -0400</pubDate>
      
      <guid>http://keithjgrant.com/posts/2017/04/dont-qwop-your-css/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.foddy.net/Athletics.html&#34;&gt;QWOP&lt;/a&gt;, if you haven’t played it, is a ridiculous running game. Instead of pressing, say, the right arrow key to run, you must control each of the runner’s muscles independently. Pressing the keys Q, W, O, and P will each extend one leg or bend one knee. Coordinating them all is incredibly difficult, and you are usually lucky if you can make a full stride before falling on your head.&lt;/p&gt;

&lt;p&gt;This is also how a lot of developers treat CSS. Instead of thinking about constructing a robust system, they focus on only one specific part of the desired result. Instead of asking, “How do I run?”, they ask, “How do I flex my knee?” I can teach you how to flex your knee, but if QWOP shows us anything, that knowledge might actually make running more difficult.&lt;/p&gt;

&lt;p&gt;CSS does a lot of work for you, if you will let it. Normal document flow ensures things all fit together on the page; this is why you should be judicious with positioning that breaks out of document flow. CSS automatically sizes your elements to contain their text; this is why you should avoid explicitly setting height. Relative units allow you to define one value in terms of another so they will respond together if the context changes; this is why I sometimes frown on pixel units. Margins collapse so that paragraphs stack with the correct spacing. Certain properties inherit down the DOM tree so you don’t have to specify a font for every single element.&lt;/p&gt;

&lt;p&gt;You can get down to the “bare metal” in CSS, if you want. You can specify absolute positions for everything and set explicit heights and define every single value in pixels and override inheritance. But in the end, this will make more work for yourself and unearth edge cases you didn’t think about.&lt;/p&gt;

&lt;p&gt;The next time you find yourself asking something like, “How do I vertically center this?”, take a step back. Are you having trouble because you set the height on something? Why did you set a height? What are you &lt;em&gt;actually&lt;/em&gt; trying to achieve? Instead of focusing on a specific metric, think about the system as a whole: perhaps you want several items to all have the same height. Now, the problem is defined in terms of some desired &lt;a href=&#34;https://www.youtube.com/watch?v=TGHbkTGVqoU&#34;&gt;system behavior&lt;/a&gt;. Solve for that: flexbox or grid can align multiple elements with the same height (they can also center the contents within, too).&lt;/p&gt;

&lt;p&gt;The automatic behaviors of CSS aren’t always apparent if you aren’t familiar with them. They can result in weird outcomes, and you will be frustrated by them. So, I think, the first tendency is to find a way to turn off this “help.” Don’t.&lt;/p&gt;

&lt;p&gt;Trust CSS; it does good things for you if you let it. Learn how to solve for system behaviors. Unless you like running by pressing Q, W, O, and P.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS is Not Broken</title>
      <link>http://keithjgrant.com/posts/2017/03/css-is-not-broken/</link>
      <pubDate>Fri, 24 Mar 2017 14:15:34 -0400</pubDate>
      
      <guid>http://keithjgrant.com/posts/2017/03/css-is-not-broken/</guid>
      <description>&lt;p&gt;Coding in any language is hard before you spend time mastering it. Imagine what your JavaScript would look like if you never took the time to learn about OOP or functional programming principles? Just because you &lt;em&gt;expect&lt;/em&gt; CSS to be easy, doesn’t mean the language is broken when you find it is not.&lt;/p&gt;

&lt;p&gt;A lot of people have &lt;a href=&#34;https://simpleprogrammer.com/2013/05/06/why-javascript-is-doomed/&#34;&gt;gone on about&lt;/a&gt; &lt;a href=&#34;https://medium.com/smalltalk-talk/the-three-worst-programming-languages-b1ec25a232c1#e848&#34;&gt;how horrible JavaScript is&lt;/a&gt;. JavaScript is not horrible. It is an incredible language. It has a few odd quirks, just as CSS does. But if you take the time to actually understand these quirks, you will reap huge reward.&lt;/p&gt;

&lt;p&gt;You cannot be proficient in JavaScript until you understand coercion, prototypal inheritance, and asyncronous flow control. Likewise, in CSS, you have to understand the cascade, inheritance, and the box model. Once you have those down, take a deeper look at the various layout methods. Do you know what stacking contexts and block formatting contexts are? Do you know why setting a height on an element leads to problems and how to accomplish what you need without doing so?&lt;/p&gt;

&lt;p&gt;CSS is hard. But this is not because the language is faulty. Rather, the difficulty lies in what the language seeks to accomplish. I’ve heard many developers say they wish they could “throw out CSS and start over with something better.” I think this betrays a fundamental misunderstanding of the purpose of the language:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-conversation=&#34;none&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;When you code CSS, you’re writing abstract rules to take &lt;em&gt;unknown&lt;/em&gt; content and organize it in an &lt;em&gt;unknown&lt;/em&gt; medium. That shit is hard.&lt;/p&gt;&amp;mdash; keith•j•grant (@keithjgrant) &lt;a href=&#34;https://twitter.com/keithjgrant/status/842728744653676544&#34;&gt;March 17, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Furthermore, CSS isn’t just code, it’s also part of the design. A &lt;a href=&#34;https://snook.ca/archives/html_and_css/css-concerns&#34;&gt;vital concern of CSS is consistency&lt;/a&gt;. You should want “global” styles: colors and spacing should be consistent throughout your application. Similar components need to look similar. Your buttons should all be consistently sized and your box shadows or border radiuses should not be ad-hoc.&lt;/p&gt;

&lt;p&gt;I find it ironic that developers who bemoan the “global” nature of CSS are usually the ones who run into specificity problems because they unnecessarily scope their styles to particular parts of a particular page. When you have selectors like &lt;code&gt;#directory .sorted .sidebar :nth-child(2) button&lt;/code&gt;, your problem isn’t that CSS is global. Your CSS isn’t global enough!&lt;/p&gt;

&lt;p&gt;The next thing you know, you find yourself using &lt;code&gt;!important&lt;/code&gt; to correct specificity problems. This is a red flag that you need to stop and learn the cascade. You can use &lt;code&gt;!important&lt;/code&gt; to sweep specificity problems under the rug once. But you will soon need it a second time, at which point you will face the same specificity problem all over again.&lt;/p&gt;

&lt;p&gt;Design your styles so they can be reused, anywhere in the app. Learn SMACSS and BEM. And don’t stop because you understand the “naming system”&amp;mdash;these methodologies are about far more than double-underscores and double-hyphens. They are about code organization, reuse, and refactoring. They are the solution to dead code elimination. They offer ways to utilize the cascade instead of fearing it. They allow you to know precisely where in your code you can find a certain set of styles.&lt;/p&gt;

&lt;p&gt;CSS isn’t broken. But it does require &lt;a href=&#34;https://www.manning.com/books/css-in-depth&#34;&gt;study and skill&lt;/a&gt;. It does require careful thought. As with anything in programming, you can make a mess of the code. Sure, blaming the language is the easy way out. But when your JavaScript is confusing and buggy, you know it’s not the language’s fault.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>More thoughts on CSS in JS</title>
      <link>http://keithjgrant.com/posts/2017/03/more-thoughts-on-css-in-js/</link>
      <pubDate>Mon, 20 Mar 2017 15:07:49 -0400</pubDate>
      
      <guid>http://keithjgrant.com/posts/2017/03/more-thoughts-on-css-in-js/</guid>
      <description>&lt;p&gt;At a previous job, I was brought in to a team of Java devs to provide a little JS support. They had been using something called PrimeFaces, basically a bunch of front-end components you drop into JSF pages. Working with it was horrid.&lt;/p&gt;

&lt;p&gt;In short, these devs knew nothing about JavaScript or the front-end, but this tool let them sort of hack a UI together. It abstracted away all the tools needed for really working in the front end. For me, someone adept in JavaScript, working with PrimeFaces was like trying to code without a keyboard.&lt;/p&gt;

&lt;p&gt;I’ve also had to work on projects coded in ExtJS. These feel about the same way: although you are technically editing a JS file, you aren’t really programming “in JavaScript.” Instead, you are basically coding via configuration. Actual understanding of JavaScript doesn’t help you much.&lt;/p&gt;

&lt;p&gt;To me, CSS in JS feels the same way. It feels like a tool so a bunch of JavaScript devs can kinda-sorta hack together styles without actually having to write CSS. Except the syntax is more clunky and you have taken away the cascade. (And, yet, surprise! You still need to learn the most complicated parts of CSS.)&lt;/p&gt;

&lt;p&gt;Now I’ll be fair, CSS in JS libraries typically provide a much thinner buffer between you and the actual CSS when compared to PrimeFaces. But still… it’s an abstraction layer. It gives the illusion of writing styles in perfect isolation, but inheritance still takes place and can interfere. It gets between me and the code I want actual control over.&lt;/p&gt;

&lt;p&gt;I know what I’m doing when I code CSS. I &lt;em&gt;want&lt;/em&gt; the cascade in many instances; removing it feels crippling. I won’t deny CSS in JS offers some benefits. But they are benefits I am not convinced I need at a cost I am not sure I want to pay.&lt;/p&gt;

&lt;p&gt;I won’t say it’s the wrong choice for everyone. Some folks who really do grok CSS are in favor of it. Sometimes ExtJS is the right choice (don’t quote me on that). But dang, please know it’s a compromise that someone might have to clean up down the road.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A better approach to CSS aspect ratios</title>
      <link>http://keithjgrant.com/posts/2017/03/aspect-ratios/</link>
      <pubDate>Tue, 14 Mar 2017 10:12:43 -0400</pubDate>
      
      <guid>http://keithjgrant.com/posts/2017/03/aspect-ratios/</guid>
      <description>

&lt;p&gt;There’s an old hack for creating elements with a fixed aspect ratio that involves using a percentage-based padding. You may be familiar with it. It looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.tile {
  height: 0;
  overflow: hidden;
  padding-bottom: 25%;
  background-color: bisque;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The element is forced to have no height, then its bottom padding is set to the actual desired height. This produces an element something like this:&lt;/p&gt;

&lt;figure class=&#34;-demo-container&#34;&gt;
  &lt;div class=&#34;-demo1&#34;&gt;
    4:1 aspect ratio
  &lt;/div&gt;
&lt;/figure&gt;

&lt;p&gt;This works because of a peculiar quirk of padding: Any padding specified in percent computes to a percentage of the element’s &lt;em&gt;width&lt;/em&gt;&amp;mdash;even if it is a top or bottom padding. (The same is true for margin as well.) This is a bit counter-intuitive, but it comes in handy. I think the original reasoning was so you could declare something like &lt;code&gt;padding: 5%&lt;/code&gt; and get an equal padding on all four sides of the element, regardless of its shape.&lt;/p&gt;

&lt;p&gt;Of course, this approach has a problem: overflow is cut off:&lt;/p&gt;

&lt;figure class=&#34;-demo-container&#34;&gt;
  &lt;div class=&#34;-demo1&#34;&gt;
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam laoreet tellus ut erat egestas vestibulum. Aliquam erat volutpat. Fusce ut nibh quis lectus fermentum aliquet. Suspendisse potenti.
  &lt;/div&gt;
&lt;/figure&gt;

&lt;p&gt;This approach creates fixed height of the element, which in CSS is an anti-pattern. For this reason, I’ve always felt dirty using it.&lt;/p&gt;

&lt;h2 id=&#34;dealing-with-overflow&#34;&gt;Dealing with overflow&lt;/h2&gt;

&lt;p&gt;A while back, I stumbled across an approach that is similar, but prevents the overflow problem. Instead of setting our element’s height, we can set the height on a floated &lt;code&gt;::before&lt;/code&gt; pseudo-element. Watch what happens when we do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.tile {
  background-color: darkseagreen;
}
.tile::before {
  content: &amp;quot;&amp;quot;;
  float: left;
  padding-bottom: 25%;
}
.tile::after {
  clear: left;
  content: &amp;quot; &amp;quot;;
  display: table;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;::after&lt;/code&gt; is just a familiar clearfix. This produces a very similar result:&lt;/p&gt;

&lt;figure class=&#34;-demo-container&#34;&gt;
  &lt;div class=&#34;-demo2&#34;&gt;
    4:1 aspect ratio
  &lt;/div&gt;
&lt;/figure&gt;

&lt;p&gt;However, the element will still grow to contain overflow if necessary:&lt;/p&gt;

&lt;figure class=&#34;-demo-container&#34;&gt;
  &lt;div class=&#34;-demo2&#34;&gt;
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam laoreet tellus ut erat egestas vestibulum. Aliquam erat volutpat. Fusce ut nibh quis lectus fermentum aliquet. Suspendisse potenti.
  &lt;/div&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;

&lt;p&gt;The trick is, instead of explicitly controlling (and thus limiting) the height of the element, we set a known height on the floated pseudo element. By using a padding-based percentage, this will be a ratio of the element’s width. We float it left and leave it empty, producing a width of zero. Here is the floated element, with a black outline added:&lt;/p&gt;

&lt;figure class=&#34;-demo-container&#34;&gt;
  &lt;div class=&#34;-demo3&#34;&gt;
    Floated pseudo element provides a min height to the element.
  &lt;/div&gt;
&lt;/figure&gt;

&lt;p&gt;Then, in the &lt;code&gt;::after&lt;/code&gt; pseudo-element, we clear the float, forcing the element to grow to contain the floated &lt;code&gt;::before&lt;/code&gt;. Since the float has a width of 0, it doesn’t interfere with the content layout in any way.  And when the content extends below the bottom of the float, the box simply grows naturally to contain it:&lt;/p&gt;

&lt;figure class=&#34;-demo-container&#34;&gt;
  &lt;div class=&#34;-demo3&#34;&gt;
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam laoreet tellus ut erat egestas vestibulum. Aliquam erat volutpat. Fusce ut nibh quis lectus fermentum aliquet. Suspendisse potenti.
  &lt;/div&gt;
&lt;/figure&gt;

&lt;style&gt;
  .-demo-container {
    max-width: 300px;
    line-height: 1.6;
  }

  .-demo1 {
    height: 0;
    overflow: hidden;
    padding-bottom: 25%;
    background-color: bisque;
  }

  .-demo2 {
    background-color: darkseagreen;
    line-height: 1.6;
  }
  .-demo2::before {
    content: &#34;&#34;;
    float: left;
    padding-bottom: 25%;
  }
  .-demo2::after {
    clear: left;
    content: &#34; &#34;;
    display: table;
  }

  .-demo3 {
    background-color: darkseagreen;
    line-height: 1.6;
  }
  .-demo3::before {
    content: &#34;&#34;;
    float: left;
    padding-bottom: 25%;
    border: 1px solid black;
  }
  .-demo3::after {
    clear: left;
    content: &#34; &#34;;
    display: table;
  }
&lt;/style&gt;
</description>
    </item>
    
    <item>
      <title>It’s Both</title>
      <link>http://keithjgrant.com/posts/2017/01/its-both/</link>
      <pubDate>Fri, 27 Jan 2017 08:54:57 -0500</pubDate>
      
      <guid>http://keithjgrant.com/posts/2017/01/its-both/</guid>
      <description>

&lt;p&gt;I’m a JavaScript developer. I have experience working in large web applications and dealing with the problems that come from scaling up. I studied Computer Science in college and love solving problems of software architecture.&lt;/p&gt;

&lt;p&gt;I’m also (in case you &lt;a href=&#34;https://www.manning.com/books/css-in-depth&#34;&gt;somehow missed it&lt;/a&gt;) a “CSS Guy”. I learned CSS during its infancy in the mid-nineties and have worked to stay up to speed ever since.&lt;/p&gt;

&lt;p&gt;When I look out at the industry today, it kind of feels &lt;a href=&#34;https://medium.com/javascript-scene/jsx-looks-like-an-abomination-1c1ec351a918#1e2d&#34;&gt;like&lt;/a&gt; &lt;a href=&#34;http://mrmrs.io/writing/2016/03/24/scalable-css/&#34;&gt;watching&lt;/a&gt; &lt;a href=&#34;http://www.zeldman.com/2017/01/03/kiss-my-classname/&#34;&gt;parents&lt;/a&gt; &lt;a href=&#34;https://twitter.com/thejameskyle/status/824795012680421376&#34;&gt;fight&lt;/a&gt;. And I’ll admit it, I’ve &lt;a href=&#34;http://keithjgrant.com/posts/2015/05/against-css-in-js/&#34;&gt;contributed to the problem&lt;/a&gt;. But the more I watch this unfold, the more I feel like we have two camps, talking right past one another, and no meeting in the middle. Both are missing the points the other is trying to make. So I’m shifting my stance:&lt;/p&gt;

&lt;h2 id=&#34;we-re-both-right&#34;&gt;We’re both right&lt;/h2&gt;

&lt;p&gt;Writing SPAs is complicated business. The page isn’t just a static document you can slap some styles on and call it a day. What if you need to load content dynamically, and it results in unpredictable source order of your CSS? How do you know if styles for deeply-nested dependencies are already loaded? How do you know when you can delete code?&lt;/p&gt;

&lt;p&gt;These are hard problems. You can’t answer them by simply saying “learn CSS”. I personally may not like CSS-in-JS or inline styles, but I do realize they are important experiments. They are quests for answers to these issues. I don’t think they are the ultimate solution. That’s okay. Maybe they will get us to it.&lt;/p&gt;

&lt;p&gt;On the other hand, we have whole teams of developers who fundamentally don’t grok CSS. They code up their JavaScript components, then stick the styles they want into the project stylesheet. These may be great developers when it comes to traditional programming languages, but they get really frustrated with layout problems or specificity battles. Compound this with “too many cooks in the kitchen” and you have a real mess.&lt;/p&gt;

&lt;p&gt;We have sixty-plus years of industry experience about architecting code in traditional programming languages, but we’ve struggled to apply this stuff to CSS. Only in the last seven years or so have we started to figure out best practices for the language, and we are not doing a great job of disseminating them. When we teach that BEM is a “naming convention” rather emphasize it is a way to architect systems with modular code, thousands of developers miss the point entirely. This only drives them further away because the so-called “best practices” don’t work when they aren’t actually followed.&lt;/p&gt;

&lt;p&gt;They don’t understand that BEM is about architecture, not simply namespacing. They don’t see the value of using a pattern library, of centralizing your CSS and imposing order on who controls the CSS rather than treating it like a garbage pile where any random dev can just add haphazard code.&lt;/p&gt;

&lt;p&gt;When JavaScript-centric developers hear, “putting your CSS in JavaScript makes it easier” they clamor to get on board. But this must be made absolutely clear: you still need to understand CSS. If you don’t know what a block formatting context is, CSS in JS will not fix your layout issues. If you don’t understand stacking contexts, you will continue to struggle with futile z-index battles. If you don’t learn custom properties or the difference between cascade and inheritance or margin collapsing, these experiments will not really solve the fundamental problem: most teams don’t know how to develop with CSS.&lt;/p&gt;

&lt;h2 id=&#34;always-bet-on-del-javascript-del-the-open-web&#34;&gt;Always bet on &lt;del&gt;JavaScript&lt;/del&gt; the Open Web&lt;/h2&gt;

&lt;p&gt;So, yes. Hire engineers who know how to deal with system architecture. But also &lt;a href=&#34;http://keithjgrant.com/posts/2016/10/your-team-needs-a-ux-engineer/&#34;&gt;hire someone exclusively for their CSS skills&lt;/a&gt;. Put smart people on your team from both camps. Let them work together to solve these problems. Because your problems are unique and your solutions might not look like someone else’s.&lt;/p&gt;

&lt;p&gt;I can say with confidence that CSS in JS will pass. In our industry, something new always comes along. The saying is, “Always bet on JavaScript” &amp;mdash; but this isn’t quite right. When it’s JavaScript vs Java or Ruby, yes, bet on JS. JavaScript wins not because it is inherently better; it wins because it is part of the open web platform.&lt;/p&gt;

&lt;p&gt;The open web platform always wins. And CSS is part of that platform. It’s not CSS versus JS. It’s CSS &lt;em&gt;plus&lt;/em&gt; JS. The platform will evolve. And the platform will win.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello, World Wide IndieWeb!</title>
      <link>http://keithjgrant.com/posts/2017/01/hello-indieweb/</link>
      <pubDate>Mon, 23 Jan 2017 15:34:37 -0500</pubDate>
      
      <guid>http://keithjgrant.com/posts/2017/01/hello-indieweb/</guid>
      <description>

&lt;p&gt;It’s a new year, so it’s time for a new design! Only this time, the update is more than just a CSS revamp. This year, I join the “IndieWeb”. If you don’t know what that is, read on.&lt;/p&gt;

&lt;p&gt;Let me introduce you to the newest social network: it’s called the World Wide Web and it’s more than 25 years old.&lt;/p&gt;

&lt;h2 id=&#34;the-decentralized-social-web&#34;&gt;The decentralized social web&lt;/h2&gt;

&lt;p&gt;Social networks bother me. I don’t mean the privacy issues or mysterious sorting algorithms. Apart from these things, walled gardens are antithetical to the open standards that made the web successful in the first place. I can’t follow you on Facebook unless I have a Facebook account. You can’t like or reply to my tweet unless you join Twitter. The internet was founded on principles of decentralization, yet here we are, consolidating the bulk of our online activity into a small handful of sites we don’t control.&lt;/p&gt;

&lt;p&gt;I have long wanted an open protocol to bring the key features of social networks (liking, commenting, sharing, following) out into the open web. Now, finally, I have discovered that a fair bit of progress has been made in this regard. The W3C now has a &lt;a href=&#34;https://www.w3.org/wiki/Socialwg&#34;&gt;Social Web working group&lt;/a&gt;, and their specifications are stabilizing and have even been &lt;a href=&#34;http://indieweb.org/&#34;&gt;adopted by many&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This redesign is my first step toward adopting these standards myself. I’ve completed phase one out of two (or possibly three) steps I want to take. Each one corresponds to a key piece of the “Social Web” protocols.&lt;/p&gt;

&lt;h2 id=&#34;phase-i-webmentions&#34;&gt;Phase I: Webmentions&lt;/h2&gt;

&lt;p&gt;This site now supports comments: you may comment on my blog by writing about it on your own blog. Then your blog should send mine a &lt;a href=&#34;https://indieweb.org/Webmention&#34;&gt;webmention&lt;/a&gt;. These are similar to the old “pingbacks”, except they use a simpler format and they are an official &lt;a href=&#34;https://www.w3.org/TR/webmention/&#34;&gt;W3C Recommendation&lt;/a&gt;. (If your site doesn’t support webmentions, I’ve provided a little form where you can submit this yourself).&lt;/p&gt;

&lt;p&gt;They basically work like this: I write you a post. Then you write a post, with metadata indicating it is a response to my post. Your blog then tells my blog that you replied and provides the URL. If I want, I can then link to your reply. Both our posts now link to each other, and we each own our own data!&lt;/p&gt;

&lt;p&gt;And because we are still beholden to some social networks, there is a service called &lt;a href=&#34;https://brid.gy/&#34;&gt;brid.gy&lt;/a&gt; that will find links to my post (and replies to those links) on Twitter or Facebook, and let my blog know about them, so I can log them here as comments. We can drag the old social network silos out into the open web!&lt;/p&gt;

&lt;h2 id=&#34;phase-ii-micropub&#34;&gt;Phase II: MicroPub&lt;/h2&gt;

&lt;p&gt;My next goal will be to incorporate something called MicroPub. This basically means I can write short posts (say, 140 characters), called Notes. I will use these notes to post replies to articles on the web. I can also syndicate these to twitter, where webmentions and brid.gy will help me track any conversation that happens there and link to it from my blog.&lt;/p&gt;

&lt;p&gt;This involves a few more moving parts than phase I, but thankfully, most of the tools for this already exist as services online. I just need to wire things up and test them out.&lt;/p&gt;

&lt;h2 id=&#34;phase-iii-activitypub&#34;&gt;Phase III: ActivityPub?&lt;/h2&gt;

&lt;p&gt;The last piece of the puzzle for a decentralized social web is the whole subscribers/followers bit. The old concepts of RSS, PubSub, and feed readers can do this, but that model is more of a one-way publication, not a two-way street. There is a new approaches the W3C has been working on called ActivityPub that involves tracking followers and bringing more of the social network activities into this realm.&lt;/p&gt;

&lt;p&gt;This arena isn’t as mature yet, but I’ve certainly got my eye on it.&lt;/p&gt;

&lt;p&gt;I have high hopes for this will take us. It may take a while &amp;mdash; a couple years, at least &amp;mdash; but I think we will start to see more discussion happening in this arena. If you want to learn more about this stuff, checkout &lt;a href=&#34;http://indieweb.org/&#34;&gt;indieweb.org&lt;/a&gt; or the &lt;a href=&#34;https://wordpress.org/plugins/indieweb/&#34;&gt;IndieWeb WordPress plugin&lt;/a&gt;. Hello, IndieWeb!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Let’s Talk About Separation of Concerns</title>
      <link>http://keithjgrant.com/posts/2016/12/separation-of-concerns/</link>
      <pubDate>Fri, 23 Dec 2016 00:00:00 -0500</pubDate>
      
      <guid>http://keithjgrant.com/posts/2016/12/separation-of-concerns/</guid>
      <description>&lt;p&gt;There’s been a lot of talk lately about good old Separation of Concerns &amp;mdash; primarily in the context of React and the use of inline styles or CSS-in-JS. Advocates of these approaches argue that the language we use (be it JS, HTML, or CSS) is an arbitrary line to draw. And I would say: Yes, language is, for the most part, an arbitrary line. But that’s beside the point.&lt;/p&gt;

&lt;p&gt;So let’s get one thing straight. This&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import styles from &#39;./tile.css&#39;;
...
render() {
  return &amp;lt;div className={styles.tile}&amp;gt;...&amp;lt;/div&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;is architectually equivalent to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;render() {
  return &amp;lt;div className=&amp;quot;tile&amp;quot;&amp;gt;...&amp;lt;/div&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The latter approach, however:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;requires a drastically simpler build process&lt;/li&gt;
&lt;li&gt;is both backwards- and forwards-compatible across all frameworks&lt;/li&gt;
&lt;li&gt;doesn’t try to pretend that those styles exist in perfect encapsulated isolation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Stop championing CSS-in-JS as some ground breaking re-thinking of Separation of Concerns. It’s not. The React component will still inherit its font face, color, and size from a parent container. It still exists on the web platform, in an HTML document, where all the rules of styles and inheritance still apply.&lt;/p&gt;

&lt;p&gt;We can debate about class name collision, co-locating stylesheets, &lt;a href=&#34;http://keithjgrant.com/posts/css-first.html&#34;&gt;how styles fit into system archetecture&lt;/a&gt;, and other related topics. But let’s take this one off the table, because it’s a straw man argument.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Your Team Needs a UX Engineer</title>
      <link>http://keithjgrant.com/posts/2016/10/your-team-needs-a-ux-engineer/</link>
      <pubDate>Sun, 02 Oct 2016 00:00:00 -0500</pubDate>
      
      <guid>http://keithjgrant.com/posts/2016/10/your-team-needs-a-ux-engineer/</guid>
      <description>&lt;p&gt;Recently, after I mentioned that I was the only one on my team that writes the CSS, someone replied, “You’re lucky”.&lt;/p&gt;

&lt;p&gt;It stuck with me, and I’ve been thinking about it since. The thing is, it’s not luck. It was a deliberate decision made early when the team was first put together. And I think the rest of the developers on my team would think themselves lucky for &lt;em&gt;not&lt;/em&gt; having to touch the CSS. It is more valuable for us to have one person on the team who specializes in that.&lt;/p&gt;

&lt;p&gt;We need to rethink something about the way we build our web development teams. We spend a lot of effort hiring good programmers, but for the most part, they are interchangeable. We make sure that everyone we hire knows the fundamentals of software engineering, architecture, and the primary language the team uses. And then we &lt;em&gt;assume&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If a developer has a solid grasp on JavaScript, we think, surely they know CSS. Surely they know how to deal with accessibility. Surely they have a grasp on how and when to use various HTML elements and aria-* properties. These are small beans compared to &lt;em&gt;the code&lt;/em&gt;. And in many ways, they are.&lt;/p&gt;

&lt;p&gt;But, of course, this isn’t how it plays out. Because we hire purely for the bigger task, CSS and accessibility always remain an afterthought. On most teams, nobody really knows what they are doing when it comes to these topics. They team stumbles along, joking amongst themselves how horrible CSS is.&lt;/p&gt;

&lt;p&gt;We need to fix this. On teams larger than four or five developers, I think we can: one person per team should be hired explicitly for these tasks. Most of the team will still be focused on JavaScript (or Python or Java). But one person&amp;mdash;call them a “CSS Developer” or “UX Engineer”&amp;mdash;should be hired specifically for these “afterthought” concerns.&lt;/p&gt;

&lt;p&gt;Is a developer building a new component and needs some styles? The UX Engineer writes that CSS. The UX Engineer gives a snippet of HTML to the developer for them to incorporate into the component. The UX engineer ensures the correct semantics and can come alongside the developer to ensure keyboard navigation works. The UX Engineer maintains a pattern library for the team to use as a reference to find existing styles.&lt;/p&gt;

&lt;p&gt;This UX Engineer serves an important role, but furthermore, they allow the other developer to offload some work. The developer can focus on the &amp;ldquo;bigger concern&amp;rdquo; of getting the business logic right and ensuring the app works correctly. This improves the developer’s productivity.&lt;/p&gt;

&lt;p&gt;This is how things work on my team. I am effectively the UX Engineer, and I think everyone enjoys the process more because of it. In our case, we stumbled upon this setup&amp;mdash;I was originally hired for my JavaScript skills. As always, the CSS was an afterthought; I just happened to be good at it, so we settled into the current arrangement.&lt;/p&gt;

&lt;p&gt;Don’t wait for your team to stumble into this. Set it up intentionally. Hire a UX Engineer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSS in Depth</title>
      <link>http://keithjgrant.com/posts/2016/08/css-in-depth/</link>
      <pubDate>Wed, 24 Aug 2016 00:00:00 -0500</pubDate>
      
      <guid>http://keithjgrant.com/posts/2016/08/css-in-depth/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://keithjgrant.com/images/2016/css-in-depth-cover.png&#34; alt=&#34;Cover of CSS in Depth&#34; class=&#34;float-right&#34;/&gt;My book is finally for sale! The &lt;abbr title=&#34;Manning Early Access Program&#34;&gt;MEAP&lt;/abbr&gt; is available on &lt;a href=&#34;https://manning.com/books/css-in-depth&#34;&gt;Manning’s website&lt;/a&gt;. The first three chapters are available now, and others will be rolling out steadily (I’ve actually already completed drafts of six chapters at this point).&lt;/p&gt;

&lt;p&gt;Until the end of August, you can use my code &lt;strong&gt;mlgrant2&lt;/strong&gt; for 50% off. Follow &lt;a href=&#34;https://twitter.com/CSSinDepth&#34;&gt;@CSSinDepth&lt;/a&gt; on Twitter for updates.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
